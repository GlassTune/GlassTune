package com.glasstune.activities;

import com.glasstune.R;
import com.glasstune.tone.Note;
import com.glasstune.utils.FrequencySmoother;
import com.glasstune.utils.NoteCalculator;
import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.transition.ChangeBounds;
import android.transition.Transition;
import android.transition.TransitionManager;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.LinearInterpolator;
import android.widget.AdapterView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import be.hogent.tarsos.dsp.AudioEvent;
import be.hogent.tarsos.dsp.MicrophoneAudioDispatcher;
import be.hogent.tarsos.dsp.pitch.PitchDetectionHandler;
import be.hogent.tarsos.dsp.pitch.PitchDetectionResult;
import be.hogent.tarsos.dsp.pitch.PitchProcessor;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class TuneGuitarActivity extends Activity implements PitchDetectionHandler {

    private static final String TAG = "GlassTune";

    private final double CALLIBRATION = 1;
    private final int SAMPLE_RATE = 22050;
    private final int BUFFER_SIZE = 1024;
    private final int OVERLAP = 512;

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;
    private Thread _pitchThread;
    private MicrophoneAudioDispatcher _dispatcher;

    private FrequencySmoother _smoother;
    private DisplayUpdater _displayUpdater;

    @Override
    protected void onCreate(Bundle bundle) {

        super.onCreate(bundle);

        _smoother = new FrequencySmoother();

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                openOptionsMenu();
            }
        });

        setContentView(mCardScroller);

        startPitchDetection(SAMPLE_RATE, BUFFER_SIZE, OVERLAP);

        _displayUpdater = new DisplayUpdater();
        _displayUpdater.execute(300);

    }

    private void startPitchDetection(int sampleRate, int bufferSize, int overlap) {

        Log.d(TAG, "Start pitch detection");
        _dispatcher = new MicrophoneAudioDispatcher(sampleRate,bufferSize,overlap);
        _dispatcher.addAudioProcessor(new PitchProcessor(PitchProcessor.PitchEstimationAlgorithm.FFT_YIN, sampleRate, bufferSize, this));
        _pitchThread = new Thread(_dispatcher,"Audio dispatching");
        _pitchThread.start();

    }

    @Override
    protected void onResume() {

        super.onResume();
        Log.d(TAG,"resume");
        mCardScroller.activate();

    }

    @Override
    protected void onPause() {

        Log.d(TAG, "pause");
        hideCard();
        super.onPause();

    }

    private void hideCard() {

        _displayUpdater.cancel(false);
        _dispatcher.stop();
        _pitchThread.interrupt();
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mCardScroller.deactivate();

    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        AudioManager audio = (AudioManager) getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
        audio.playSoundEffect(Sounds.DISALLOWED);
        return false;
    }

    private class DisplayUpdater extends AsyncTask<Integer, Double, Void> {

        @Override
        protected Void doInBackground(Integer... params) {

            while(!isCancelled()) {
                final double average = _smoother.getSmoothedAverage();
                _smoother.clear();
                publishProgress(average);
                try {
                    Thread.sleep(params[0]);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            return null;
        }

        @Override
        protected void onProgressUpdate(Double... frequency) {
            setDisplayForFrequency(frequency[0]);
        }

    }

    public void setDisplayForFrequency(double frequency) {

        Note mainNote = Note.getNearestNote(frequency);
        Note sharpNote = Note.getNextNote(mainNote);
        Note flatNote = Note.getPreviousNote(mainNote);

        TextView mainNoteText = (TextView)findViewById(R.id.tune_view_main_note);

        if(mainNote == null || mainNote == Note.UNKNOWN) {
            Log.d(TAG,"Nothing to update");
            String unkownLabel = getResources().getString(R.string.initial_note_display);
            mainNoteText.setText(unkownLabel);
            return; // no note detected do not update display
        }

        Log.d(TAG,"Detected Note:" + mainNote.toString() + " from freq: " + frequency);

        mainNoteText.setText(mainNote.toString());

        View pitchBar = (View)findViewById(R.id.tune_view_current_pitch);
        int margin = 35;
        double leftDP = NoteCalculator.getPitchBarPosition(frequency, 640 - (margin * 2));

        Transition moveTransition = new ChangeBounds();
        moveTransition.setDuration(300);
        moveTransition.setInterpolator(new LinearInterpolator());

        TransitionManager.beginDelayedTransition((ViewGroup)pitchBar.getRootView(), moveTransition);

        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(pitchBar.getWidth(),pitchBar.getHeight());
        Log.d(TAG,String.format("Current: %d DP: %f",params.leftMargin,leftDP));
        params.setMargins((int)leftDP,0,0,0);
        pitchBar.setLayoutParams(params);

    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private View buildView() {
        return getLayoutInflater().inflate(R.layout.tune_view,null);
    }

    /**
     * Callback for the pitch detection thread, called on new pitch detected
     */
    @Override
    public void handlePitch(PitchDetectionResult pitchDetectionResult,AudioEvent audioEvent) {

        final float pitch = pitchDetectionResult.getPitch();

        if(pitch != -1 && audioEvent.getRMS() > 0.005){
            String message = String.format("Pitch detected at %.2fs: %.2fHz ( %.2f probability, RMS: %.5f )\n", audioEvent.getTimeStamp(),pitch,pitchDetectionResult.getProbability(),(audioEvent.getRMS() * 100));
            Log.d(TAG,message);

            _smoother.add(pitch * CALLIBRATION);
        }

    }
}
