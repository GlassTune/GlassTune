package com.glasstune.activities;

import com.glasstune.R;
import com.glasstune.application.GlassTuneApplication;
import com.glasstune.audio.IPitchDetection;
import com.glasstune.audio.IPitchDetectionHandler;
import com.glasstune.tone.Note;
import com.glasstune.utils.IAlertDialogBuilder;
import com.glasstune.utils.NoteCalculator;
import com.google.android.glass.app.Card;
import com.google.android.glass.media.Sounds;
import com.google.android.glass.widget.CardScrollAdapter;
import com.google.android.glass.widget.CardScrollView;

import android.app.Activity;
import android.content.Context;
import android.media.AudioManager;
import android.os.Bundle;
import android.transition.ChangeBounds;
import android.transition.Transition;
import android.transition.TransitionManager;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.view.ViewGroup;
import android.view.WindowManager;
import android.view.animation.LinearInterpolator;
import android.widget.AdapterView;
import android.widget.RelativeLayout;
import android.widget.TextView;

import javax.inject.Inject;

/**
 * An {@link Activity} showing a tuggable "Hello World!" card.
 * <p>
 * The main content view is composed of a one-card {@link CardScrollView} that provides tugging
 * feedback to the user when swipe gestures are detected.
 * If your Glassware intends to intercept swipe gestures, you should set the content view directly
 * and use a {@link com.google.android.glass.touchpad.GestureDetector}.
 * @see <a href="https://developers.google.com/glass/develop/gdk/touch">GDK Developer Guide</a>
 */
public class TuneGuitarActivity extends Activity implements IPitchDetectionHandler {

    private static final String TAG = "GlassTune";

    private final double CALLIBRATION = 1;

    /** {@link CardScrollView} to use as the main content view. */
    private CardScrollView mCardScroller;

    /** "Hello World!" {@link View} generated by {@link #buildView()}. */
    private View mView;

    @Inject IPitchDetection _pitchDetection;
    @Inject IAlertDialogBuilder _alertDialogBuilder;

    private int _noNoteCount = 0;
    private boolean _noteDetected = false;
    private AlertDialog _dialog = null;

    @Override
    protected void onCreate(Bundle bundle) {

        super.onCreate(bundle);

        ((GlassTuneApplication)getApplication()).inject(this);

        getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);

        mView = buildView();

        mCardScroller = new CardScrollView(this);
        mCardScroller.setAdapter(new CardScrollAdapter() {
            @Override
            public int getCount() {
                return 1;
            }

            @Override
            public Object getItem(int position) {
                return mView;
            }

            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                return mView;
            }

            @Override
            public int getPosition(Object item) {
                if (mView.equals(item)) {
                    return 0;
                }
                return AdapterView.INVALID_POSITION;
            }
        });

        // Handle the TAP event.
        mCardScroller.setOnItemClickListener(new AdapterView.OnItemClickListener() {
            @Override
            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                openOptionsMenu();
            }
        });

        setContentView(mCardScroller);
        createAndShowDialog(R.drawable.ic_action_guitar_150, R.string.initial_overlay_text, R.string.initial_overlay_footnote);
        startPitchDetection();
        Log.d("TAG", "Created View");
    }

    @Override
    protected void onResume() {
        super.onResume();
        Log.d(TAG,"resume");
        mCardScroller.activate();
    }

    @Override
    protected void onPause() {
        Log.d(TAG, "pause");
        stopPitchDetection();
        hideCard();
        super.onPause();
    }

    private void hideCard() {
        stopPitchDetection();
        getWindow().clearFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        mCardScroller.deactivate();
    }

    private void stopPitchDetection() {
        _pitchDetection.stop();
    }

    private void startPitchDetection() {
        Log.d(TAG, "Start pitch detection");
        _pitchDetection.setDelegate(this);
        _pitchDetection.start();
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        AudioManager audio = (AudioManager) getApplicationContext().getSystemService(Context.AUDIO_SERVICE);
        audio.playSoundEffect(Sounds.DISALLOWED);
        return false;
    }

    @Override
    public void handlePitch(double frequency) {
        setDisplayForFrequency(frequency);
    }

    public void setDisplayForFrequency(double frequency) {
        Note mainNote = Note.getNearestNote(frequency);

        TextView mainNoteText = (TextView)findViewById(R.id.tune_view_main_note);

        if(mainNote == null || mainNote == Note.UNKNOWN) {

            if(_noNoteCount == 9 && _noteDetected) {
                hideDialog();
                createAndShowDialog(R.drawable.ic_warning_150, R.string.no_note_text, R.string.no_note_footnote);
            }

            _noNoteCount ++;
            return; // no note detected do not update display
        }

        Log.d(TAG,"Detected Note:" + mainNote.toString() + " from freq: " + frequency);

        mainNoteText.setText(mainNote.toString());
        setPitchBarPosition(frequency);

        hideDialog();
        _noNoteCount = 0;
        _noteDetected = true;
    }

    protected void createAndShowDialog(int iconResID, int textResId, int footnoteResId) {
        _dialog = _alertDialogBuilder.setContext(TuneGuitarActivity.this)
                .setText(textResId)
                .setFootnote(footnoteResId)
                .setIcon(iconResID)
                .build();
        _dialog.show();
    }

    protected void hideDialog() {
        if(_dialog != null) {
            _dialog.dismiss();
            _dialog = null;
        }
    }

    private void setPitchBarPosition(double frequency) {
        View pitchBar = (View)findViewById(R.id.tune_view_current_pitch);
        int margin = 35;
        double leftDP = NoteCalculator.getPitchBarPosition(frequency, 640 - (margin * 2));

        Transition moveTransition = new ChangeBounds();
        moveTransition.setDuration(300);
        moveTransition.setInterpolator(new LinearInterpolator());

        TransitionManager.beginDelayedTransition((ViewGroup) pitchBar.getRootView(), moveTransition);

        RelativeLayout.LayoutParams params = new RelativeLayout.LayoutParams(pitchBar.getWidth(),pitchBar.getHeight());
        Log.d(TAG, String.format("Current: %d DP: %f", params.leftMargin, leftDP));
        params.setMargins((int)leftDP,0,0,0);
        pitchBar.setLayoutParams(params);
    }

    /**
     * Builds a Glass styled "Hello World!" view using the {@link Card} class.
     */
    private View buildView() {
        return getLayoutInflater().inflate(R.layout.tune_view,null);
    }

}
